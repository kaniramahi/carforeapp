import numpy as np # mathemtaical computation
# numpy is aliased as np
import pandas as pd # data preprocessing
# pandas is aliased as pd
import matplotlib.pyplot as plt # visualization
# pyplot is aliased as plt
import seaborn as sns  # visualization
# seaborn is aliased as snspip

#importent library's 
# Major Import
import sklearn
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import RandomOverSampler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.pipeline import Pipeline

 df = pd.read_pickle
 fig = plt.figure()  # Create a Figure object
 
df=pd.read_csv('car details.csv')
df.head()
 df.info
 df.shape
 df.columns
 
  #Split the column name to get the model of the car
df["model"] = df.name.apply(lambda x : ' '.join(x.split(' ')[:1]))
df['model'].value_counts()

df.isnull().sum()

df[df.duplicated()]

#drop all duplicate rows
df = df.drop_duplicates()
df.shape

df.columns

# View unique values from categorical features
categorical = [col for col in df.columns if df[col].dtypes == 'O']

for col in categorical:
  print(df[col].unique())

df.describe

car = df.copy()

car["model"].value_counts().index

def percent(ax):
    heightlst = []
    for i in ax.patches:
        heightlst.append(i.get_height())
    total = sum(heightlst)
    
    for i in ax.patches:
        x = i.get_x()+0.2
        height = i.get_height()+4.3 
        value = ("{0:.2f}".format((i.get_height()/total)*100)+'%')
        
        ax.text(x, height, value, fontsize=14,color='black')

# Plot of Car Models Distribution
figure = plt.figure(figsize=(12,8))
plt.title('Car Models Distribution', fontsize=18)
plot = sns.countplot(x="model", data=car, order = car['model'].value_counts().index[:5], palette='Blues_r')
percent(plot)

plt.show()

def categorical_summarized(dataframe, x=None, y=None, hue=None, palette='Blues_r', verbose=True):
    if x == None:
        column_interested = y
    else:
        column_interested = x
    series = dataframe[column_interested]
    print(series.describe())
    print('mode: ', series.mode())
    if verbose:
        print('='*80)
        print(series.value_counts())

    sns.countplot(x=x, y=y, hue=hue, data=dataframe, palette=palette)
    plt.show()
    
    categorical_summarized(car, x='fuel')
    
    categorical_summarized(car, x='seller_type')
    
    categorical_summarized(car, x='owner')
    
    # Subplot of Categorical Summary
plt.figure(figsize=(18,8))

plt.subplot(2,2,1)
plt.title('Fuel Summary', fontsize=18)
sns.countplot(data=car, x='fuel', palette='Blues_r')
plt.xlabel('')
plt.subplot(2,2,2)
plt.title('Transmission Summary', fontsize=18)
sns.countplot(data=car, x='transmission', palette='Blues_r')
plt.xlabel('')
plt.subplot(2,2,3)
plt.title('Owner Summary', fontsize=18)
sns.countplot(data=car, x='owner', palette='Blues_r')
plt.xlabel('')
plt.subplot(2,2,4)
plt.title('Seller Type Summary', fontsize=18)
sns.countplot(data=car, x='seller_type', palette='Blues_r')
plt.xlabel('')

plt.tight_layout()
plt.show()

## correlation metrix
sns.countplot(y=df["model"],
              order=df['model'].value_counts().sort_values(ascending=False)[:7].index)
plt.title('Top 7 car brands')
plt.show()

df.columns
sns.countplot(y=df['year'],
             order=df['year'].value_counts().sort_values(ascending=False)[:6].index)
plt.title('top 10 types')
plt.show()

sns.countplot(y=df['owner'],
              order=df['owner'].value_counts().sort_values(ascending=False).index)
plt.title('top 4 owner used in car')
plt.show()

sns.scatterplot(y=df['selling_price'],x=df['km_driven'])
plt.show()

# Boxplot for different year and price
sns.scatterplot(x=df['year'],y=df['selling_price'])
plt.show()

#### Boxplot for Company based on km
sns.scatterplot(x=df['year'],y=df['km_driven'])
plt.show()

### Detailed Analysis in selling_price, km_driven, year
pd.pivot_table(data=car, index=['name'],
               values=['selling_price','km_driven','year']).sort_values(by='selling_price', ascending=False)

pd.pivot_table(data=car, index=['name'],
               
               values=['selling_price','km_driven','year']).sort_values(by='km_driven', ascending=False)

pd.pivot_table(data=car, index=['name'], 
               values=['selling_price','km_driven','year']).sort_values(by='year', ascending=False)

###How does Categorical Feature affects selling_price
plt.figure(figsize=(24,16))

plt.subplot(2,2,1)
plt.title('Fuel by selling_price Distribution', fontsize=18)
sns.boxplot(data=car, x='selling_price', y='fuel', palette='Set2')
plt.ticklabel_format(style='plain', axis='x')
plt.subplot(2,2,2)
plt.title('Transmission by selling_price Distribution', fontsize=18)
sns.boxplot(data=car, x='selling_price', y='transmission', palette='Set2')
plt.ticklabel_format(style='plain', axis='x')
plt.subplot(2,2,3)
plt.title('Owner by selling_price Distribution', fontsize=18)
sns.boxplot(data=car, x='selling_price', y='owner', palette='Set2')
plt.ticklabel_format(style='plain', axis='x')
plt.subplot(2,2,4)
plt.title('Seller_type by selling_price Distribution', fontsize=18)
sns.boxplot(data=car, x='selling_price', y='seller_type', palette='Set2')
plt.ticklabel_format(style='plain', axis='x')

###Distribution Plot for Price
sns.displot(df['selling_price'])
plt.show()
 


###correlation
corr =  df.corr()


sns.heatmap(corr,annot=True,cmap='RdBu')
plt.show()

df.describe(percentiles=[0.01,0.02,0.03,0.05,0.97,0.98,0.99]).T

#### Outlier handling

#### We will handle Encoding catgeorical columns using ColumnTransformer
#### Select x(independent features) and y(dependent feature)

x = df.drop('selling_price',axis=1)
y = df['selling_price']
print(type(x))
print(type(y))
print(x.shape)
print(y.shape)

3577*0.5
 
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=42)
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

#### Create function to cpmute MSE, RMSE, MAE,Trai and Test Test Score
from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score

def eval_model(ytest,ypred):
    mae = mean_absolute_error(ytest,ypred)
    mse = mean_squared_error(ytest,ypred)
    rmse = np.sqrt(mse)
    r2s = r2_score(ytest,ypred)
    print('MAE',mae)
    print('MSE',mse)
    print('RMSE',rmse)
    print('R2 Score',r2s)
    
    x_train.dtypes
    
    ####Import ML model buliding libraries
    from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

  # Model saving
  import pickle
  
  pickle.dump(df,open('datac.pkl','wb'))
  pickle.dump(Pipeline, open('dt_modelc.pkl', 'wb'))